{"ast":null,"code":"/**\n * @remix-run/router v1.0.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {})); // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    let dataRoute = _extends({}, route, {\n      id,\n      children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n    });\n\n    return dataRoute;\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n    // parent routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n    // but do not consume the character in the matched path so they can match against\n    // nested paths.\n    \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : _extends({}, toArg);\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\"; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state);\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation;\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission);\n\n      await startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        const fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let {\n        error\n      } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(redirect, navigation, replace) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match] = _ref8;\n      return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(request) {\n    let {\n      location,\n      result\n    } = await queryImpl(request);\n\n    if (result instanceof Response) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location\n    }, result);\n  }\n\n  async function queryRoute(request, routeId) {\n    let {\n      result\n    } = await queryImpl(request, routeId);\n\n    if (result instanceof Response) {\n      return result;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.errors, result.actionData, result.loaderData].find(v => v);\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(request, routeId) {\n    invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    let {\n      location,\n      matches,\n      shortCircuitState\n    } = matchRequest(request, routeId);\n\n    try {\n      if (shortCircuitState) {\n        return {\n          location,\n          result: shortCircuitState\n        };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(request, matches, getTargetMatch(matches, location), routeId != null);\n        return {\n          location,\n          result\n        };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: _extends({}, result, {\n          actionData: null,\n          actionHeaders: {}\n        })\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return {\n          location,\n          result: e\n        };\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {}\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, isRouteRequest, pendingActionError) {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(m => m.route.loader); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m, true, isRouteRequest))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  function matchRequest(req, routeId) {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (matches && routeId) {\n      matches = matches.filter(m => m.route.id === routeId);\n    } // Short circuit with a 404 if we match nothing\n\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n\n    return {\n      location,\n      matches\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match] = _ref10; // This fetcher was cancelled from a prior action submission - force reload\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, skipRedirects, isRouteRequest) {\n  if (skipRedirects === void 0) {\n    skipRedirects = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params\n    }), abortPromise]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n\nfunction createRequest(location, signal, submission) {\n  let url = createURL(location).toString();\n  let init = {\n    signal\n  };\n\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || r.path === \"\" || r.path === \"/\") || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\n\nfunction getMethodNotAllowedResult(path) {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location) {\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning$1","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_ref","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","replaceState","addEventListener","removeEventListener","ResultType","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","route","treePath","id","join","invariant","has","add","dataRoute","children","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","warning","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","handleLoaders","result","actionMatch","getTargetMatch","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","fetcher","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","doneFetcher","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","all","_ref8","resolveDeferredResults","_ref9","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","queryImpl","queryRoute","routeData","find","values","method","shortCircuitState","matchRequest","submit","loadRouteData","actionHeaders","isRouteRequest","URL","Location","statusCode","loaderHeaders","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","req","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isFetcher","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","includes","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","type","skipRedirects","resultType","onReject","handler","contentType","text","deferred","toUpperCase","body","Request","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","isRevalidatingLoader","unwrap","getAll","handle","origin","UNSAFE_convertRoutesToDataRoutes"],"sources":["/home/patrick/Documents/fullstack/auth/frontend/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.0.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {})); // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    let dataRoute = _extends({}, route, {\n      id,\n      children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n    });\n\n    return dataRoute;\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant(route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n    // parent routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n    // but do not consume the character in the matched path so they can match against\n    // nested paths.\n    \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : _extends({}, toArg);\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\"; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state);\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation;\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission);\n\n      await startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        const fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let {\n        error\n      } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(redirect, navigation, replace) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match] = _ref8;\n      return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(request) {\n    let {\n      location,\n      result\n    } = await queryImpl(request);\n\n    if (result instanceof Response) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location\n    }, result);\n  }\n\n  async function queryRoute(request, routeId) {\n    let {\n      result\n    } = await queryImpl(request, routeId);\n\n    if (result instanceof Response) {\n      return result;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.errors, result.actionData, result.loaderData].find(v => v);\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(request, routeId) {\n    invariant(request.method !== \"HEAD\", \"query()/queryRoute() do not support HEAD requests\");\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    let {\n      location,\n      matches,\n      shortCircuitState\n    } = matchRequest(request, routeId);\n\n    try {\n      if (shortCircuitState) {\n        return {\n          location,\n          result: shortCircuitState\n        };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(request, matches, getTargetMatch(matches, location), routeId != null);\n        return {\n          location,\n          result\n        };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: _extends({}, result, {\n          actionData: null,\n          actionHeaders: {}\n        })\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return {\n          location,\n          result: e\n        };\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, true, isRouteRequest);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {}\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, isRouteRequest, pendingActionError) {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]).filter(m => m.route.loader); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(\"loader\", request, m, true, isRouteRequest))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  function matchRequest(req, routeId) {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (matches && routeId) {\n      matches = matches.filter(m => m.route.id === routeId);\n    } // Short circuit with a 404 if we match nothing\n\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {}\n        }\n      };\n    }\n\n    return {\n      location,\n      matches\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match] = _ref10;\n\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, skipRedirects, isRouteRequest) {\n  if (skipRedirects === void 0) {\n    skipRedirects = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params\n    }), abortPromise]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\"); // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n\nfunction createRequest(location, signal, submission) {\n  let url = createURL(location).toString();\n  let init = {\n    signal\n  };\n\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || r.path === \"\" || r.path === \"/\") || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n}\n\nfunction getMethodNotAllowedResult(path) {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + href + \"]\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(search || \"\")) {\n    return matches.slice(-2)[0];\n  }\n\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location) {\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };\n//# sourceMappingURL=router.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}